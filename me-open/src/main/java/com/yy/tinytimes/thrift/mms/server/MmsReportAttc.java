/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yy.tinytimes.thrift.mms.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 监控/举报信息上传附件
 */
public class MmsReportAttc implements org.apache.thrift.TBase<MmsReportAttc, MmsReportAttc._Fields>, java.io.Serializable, Cloneable, Comparable<MmsReportAttc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MmsReportAttc");

  private static final org.apache.thrift.protocol.TField ATTC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("attcType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTC_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("attcText", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ATTC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("attcUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ATTC_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("attcFile", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MmsReportAttcStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MmsReportAttcTupleSchemeFactory());
  }

  /**
   * 上报类型TEXT，IMG，AUDIO，VIDEO，VIDEO_FILE，JSON
   */
  public String attcType; // required
  /**
   * 上报文本，由产品接入方按照规定 json 结构上传，接入服务按照给定格式检查
   */
  public String attcText; // required
  /**
   * 上报链接
   */
  public String attcUrl; // required
  /**
   * (取消)二进制文件
   */
  public ByteBuffer attcFile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 上报类型TEXT，IMG，AUDIO，VIDEO，VIDEO_FILE，JSON
     */
    ATTC_TYPE((short)1, "attcType"),
    /**
     * 上报文本，由产品接入方按照规定 json 结构上传，接入服务按照给定格式检查
     */
    ATTC_TEXT((short)2, "attcText"),
    /**
     * 上报链接
     */
    ATTC_URL((short)3, "attcUrl"),
    /**
     * (取消)二进制文件
     */
    ATTC_FILE((short)4, "attcFile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTC_TYPE
          return ATTC_TYPE;
        case 2: // ATTC_TEXT
          return ATTC_TEXT;
        case 3: // ATTC_URL
          return ATTC_URL;
        case 4: // ATTC_FILE
          return ATTC_FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("attcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTC_TEXT, new org.apache.thrift.meta_data.FieldMetaData("attcText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTC_URL, new org.apache.thrift.meta_data.FieldMetaData("attcUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTC_FILE, new org.apache.thrift.meta_data.FieldMetaData("attcFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MmsReportAttc.class, metaDataMap);
  }

  public MmsReportAttc() {
  }

  public MmsReportAttc(
    String attcType,
    String attcText,
    String attcUrl,
    ByteBuffer attcFile)
  {
    this();
    this.attcType = attcType;
    this.attcText = attcText;
    this.attcUrl = attcUrl;
    this.attcFile = attcFile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MmsReportAttc(MmsReportAttc other) {
    if (other.isSetAttcType()) {
      this.attcType = other.attcType;
    }
    if (other.isSetAttcText()) {
      this.attcText = other.attcText;
    }
    if (other.isSetAttcUrl()) {
      this.attcUrl = other.attcUrl;
    }
    if (other.isSetAttcFile()) {
      this.attcFile = org.apache.thrift.TBaseHelper.copyBinary(other.attcFile);
;
    }
  }

  public MmsReportAttc deepCopy() {
    return new MmsReportAttc(this);
  }

  @Override
  public void clear() {
    this.attcType = null;
    this.attcText = null;
    this.attcUrl = null;
    this.attcFile = null;
  }

  /**
   * 上报类型TEXT，IMG，AUDIO，VIDEO，VIDEO_FILE，JSON
   */
  public String getAttcType() {
    return this.attcType;
  }

  /**
   * 上报类型TEXT，IMG，AUDIO，VIDEO，VIDEO_FILE，JSON
   */
  public MmsReportAttc setAttcType(String attcType) {
    this.attcType = attcType;
    return this;
  }

  public void unsetAttcType() {
    this.attcType = null;
  }

  /** Returns true if field attcType is set (has been assigned a value) and false otherwise */
  public boolean isSetAttcType() {
    return this.attcType != null;
  }

  public void setAttcTypeIsSet(boolean value) {
    if (!value) {
      this.attcType = null;
    }
  }

  /**
   * 上报文本，由产品接入方按照规定 json 结构上传，接入服务按照给定格式检查
   */
  public String getAttcText() {
    return this.attcText;
  }

  /**
   * 上报文本，由产品接入方按照规定 json 结构上传，接入服务按照给定格式检查
   */
  public MmsReportAttc setAttcText(String attcText) {
    this.attcText = attcText;
    return this;
  }

  public void unsetAttcText() {
    this.attcText = null;
  }

  /** Returns true if field attcText is set (has been assigned a value) and false otherwise */
  public boolean isSetAttcText() {
    return this.attcText != null;
  }

  public void setAttcTextIsSet(boolean value) {
    if (!value) {
      this.attcText = null;
    }
  }

  /**
   * 上报链接
   */
  public String getAttcUrl() {
    return this.attcUrl;
  }

  /**
   * 上报链接
   */
  public MmsReportAttc setAttcUrl(String attcUrl) {
    this.attcUrl = attcUrl;
    return this;
  }

  public void unsetAttcUrl() {
    this.attcUrl = null;
  }

  /** Returns true if field attcUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAttcUrl() {
    return this.attcUrl != null;
  }

  public void setAttcUrlIsSet(boolean value) {
    if (!value) {
      this.attcUrl = null;
    }
  }

  /**
   * (取消)二进制文件
   */
  public byte[] getAttcFile() {
    setAttcFile(org.apache.thrift.TBaseHelper.rightSize(attcFile));
    return attcFile == null ? null : attcFile.array();
  }

  public ByteBuffer bufferForAttcFile() {
    return attcFile;
  }

  /**
   * (取消)二进制文件
   */
  public MmsReportAttc setAttcFile(byte[] attcFile) {
    setAttcFile(attcFile == null ? (ByteBuffer)null : ByteBuffer.wrap(attcFile));
    return this;
  }

  public MmsReportAttc setAttcFile(ByteBuffer attcFile) {
    this.attcFile = attcFile;
    return this;
  }

  public void unsetAttcFile() {
    this.attcFile = null;
  }

  /** Returns true if field attcFile is set (has been assigned a value) and false otherwise */
  public boolean isSetAttcFile() {
    return this.attcFile != null;
  }

  public void setAttcFileIsSet(boolean value) {
    if (!value) {
      this.attcFile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ATTC_TYPE:
      if (value == null) {
        unsetAttcType();
      } else {
        setAttcType((String)value);
      }
      break;

    case ATTC_TEXT:
      if (value == null) {
        unsetAttcText();
      } else {
        setAttcText((String)value);
      }
      break;

    case ATTC_URL:
      if (value == null) {
        unsetAttcUrl();
      } else {
        setAttcUrl((String)value);
      }
      break;

    case ATTC_FILE:
      if (value == null) {
        unsetAttcFile();
      } else {
        setAttcFile((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTC_TYPE:
      return getAttcType();

    case ATTC_TEXT:
      return getAttcText();

    case ATTC_URL:
      return getAttcUrl();

    case ATTC_FILE:
      return getAttcFile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ATTC_TYPE:
      return isSetAttcType();
    case ATTC_TEXT:
      return isSetAttcText();
    case ATTC_URL:
      return isSetAttcUrl();
    case ATTC_FILE:
      return isSetAttcFile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MmsReportAttc)
      return this.equals((MmsReportAttc)that);
    return false;
  }

  public boolean equals(MmsReportAttc that) {
    if (that == null)
      return false;

    boolean this_present_attcType = true && this.isSetAttcType();
    boolean that_present_attcType = true && that.isSetAttcType();
    if (this_present_attcType || that_present_attcType) {
      if (!(this_present_attcType && that_present_attcType))
        return false;
      if (!this.attcType.equals(that.attcType))
        return false;
    }

    boolean this_present_attcText = true && this.isSetAttcText();
    boolean that_present_attcText = true && that.isSetAttcText();
    if (this_present_attcText || that_present_attcText) {
      if (!(this_present_attcText && that_present_attcText))
        return false;
      if (!this.attcText.equals(that.attcText))
        return false;
    }

    boolean this_present_attcUrl = true && this.isSetAttcUrl();
    boolean that_present_attcUrl = true && that.isSetAttcUrl();
    if (this_present_attcUrl || that_present_attcUrl) {
      if (!(this_present_attcUrl && that_present_attcUrl))
        return false;
      if (!this.attcUrl.equals(that.attcUrl))
        return false;
    }

    boolean this_present_attcFile = true && this.isSetAttcFile();
    boolean that_present_attcFile = true && that.isSetAttcFile();
    if (this_present_attcFile || that_present_attcFile) {
      if (!(this_present_attcFile && that_present_attcFile))
        return false;
      if (!this.attcFile.equals(that.attcFile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MmsReportAttc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAttcType()).compareTo(other.isSetAttcType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttcType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attcType, other.attcType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttcText()).compareTo(other.isSetAttcText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttcText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attcText, other.attcText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttcUrl()).compareTo(other.isSetAttcUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttcUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attcUrl, other.attcUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttcFile()).compareTo(other.isSetAttcFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttcFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attcFile, other.attcFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MmsReportAttc(");
    boolean first = true;

    sb.append("attcType:");
    if (this.attcType == null) {
      sb.append("null");
    } else {
      sb.append(this.attcType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attcText:");
    if (this.attcText == null) {
      sb.append("null");
    } else {
      sb.append(this.attcText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attcUrl:");
    if (this.attcUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.attcUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attcFile:");
    if (this.attcFile == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.attcFile, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MmsReportAttcStandardSchemeFactory implements SchemeFactory {
    public MmsReportAttcStandardScheme getScheme() {
      return new MmsReportAttcStandardScheme();
    }
  }

  private static class MmsReportAttcStandardScheme extends StandardScheme<MmsReportAttc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MmsReportAttc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attcType = iprot.readString();
              struct.setAttcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTC_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attcText = iprot.readString();
              struct.setAttcTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attcUrl = iprot.readString();
              struct.setAttcUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTC_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attcFile = iprot.readBinary();
              struct.setAttcFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MmsReportAttc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.attcType != null) {
        oprot.writeFieldBegin(ATTC_TYPE_FIELD_DESC);
        oprot.writeString(struct.attcType);
        oprot.writeFieldEnd();
      }
      if (struct.attcText != null) {
        oprot.writeFieldBegin(ATTC_TEXT_FIELD_DESC);
        oprot.writeString(struct.attcText);
        oprot.writeFieldEnd();
      }
      if (struct.attcUrl != null) {
        oprot.writeFieldBegin(ATTC_URL_FIELD_DESC);
        oprot.writeString(struct.attcUrl);
        oprot.writeFieldEnd();
      }
      if (struct.attcFile != null) {
        oprot.writeFieldBegin(ATTC_FILE_FIELD_DESC);
        oprot.writeBinary(struct.attcFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MmsReportAttcTupleSchemeFactory implements SchemeFactory {
    public MmsReportAttcTupleScheme getScheme() {
      return new MmsReportAttcTupleScheme();
    }
  }

  private static class MmsReportAttcTupleScheme extends TupleScheme<MmsReportAttc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MmsReportAttc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAttcType()) {
        optionals.set(0);
      }
      if (struct.isSetAttcText()) {
        optionals.set(1);
      }
      if (struct.isSetAttcUrl()) {
        optionals.set(2);
      }
      if (struct.isSetAttcFile()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAttcType()) {
        oprot.writeString(struct.attcType);
      }
      if (struct.isSetAttcText()) {
        oprot.writeString(struct.attcText);
      }
      if (struct.isSetAttcUrl()) {
        oprot.writeString(struct.attcUrl);
      }
      if (struct.isSetAttcFile()) {
        oprot.writeBinary(struct.attcFile);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MmsReportAttc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.attcType = iprot.readString();
        struct.setAttcTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.attcText = iprot.readString();
        struct.setAttcTextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.attcUrl = iprot.readString();
        struct.setAttcUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.attcFile = iprot.readBinary();
        struct.setAttcFileIsSet(true);
      }
    }
  }

}

