/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yy.tinytimes.thrift.mms.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 处罚指令执行请求包
 */
public class MmsReportCmdReq implements org.apache.thrift.TBase<MmsReportCmdReq, MmsReportCmdReq._Fields>, java.io.Serializable, Cloneable, Comparable<MmsReportCmdReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MmsReportCmdReq");

  private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("serial", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXT_PAR_FIELD_DESC = new org.apache.thrift.protocol.TField("extPar", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("sign", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MmsReportCmdReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MmsReportCmdReqTupleSchemeFactory());
  }

  /**
   * 密钥编码
   */
  public String appKey; // required
  /**
   * 流水号
   */
  public String serial; // required
  /**
   * 指令
   */
  public String cmd; // required
  /**
   * 处罚理由
   */
  public String reason; // required
  /**
   * 反馈信息
   */
  public String msg; // required
  /**
   * 附带参数
   */
  public String extPar; // required
  /**
   * 签名
   */
  public String sign; // required
  /**
   * 审核状态
   */
  public String status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 密钥编码
     */
    APP_KEY((short)1, "appKey"),
    /**
     * 流水号
     */
    SERIAL((short)2, "serial"),
    /**
     * 指令
     */
    CMD((short)3, "cmd"),
    /**
     * 处罚理由
     */
    REASON((short)4, "reason"),
    /**
     * 反馈信息
     */
    MSG((short)5, "msg"),
    /**
     * 附带参数
     */
    EXT_PAR((short)6, "extPar"),
    /**
     * 签名
     */
    SIGN((short)7, "sign"),
    /**
     * 审核状态
     */
    STATUS((short)8, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_KEY
          return APP_KEY;
        case 2: // SERIAL
          return SERIAL;
        case 3: // CMD
          return CMD;
        case 4: // REASON
          return REASON;
        case 5: // MSG
          return MSG;
        case 6: // EXT_PAR
          return EXT_PAR;
        case 7: // SIGN
          return SIGN;
        case 8: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIAL, new org.apache.thrift.meta_data.FieldMetaData("serial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT_PAR, new org.apache.thrift.meta_data.FieldMetaData("extPar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MmsReportCmdReq.class, metaDataMap);
  }

  public MmsReportCmdReq() {
  }

  public MmsReportCmdReq(
    String appKey,
    String serial,
    String cmd,
    String reason,
    String msg,
    String extPar,
    String sign,
    String status)
  {
    this();
    this.appKey = appKey;
    this.serial = serial;
    this.cmd = cmd;
    this.reason = reason;
    this.msg = msg;
    this.extPar = extPar;
    this.sign = sign;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MmsReportCmdReq(MmsReportCmdReq other) {
    if (other.isSetAppKey()) {
      this.appKey = other.appKey;
    }
    if (other.isSetSerial()) {
      this.serial = other.serial;
    }
    if (other.isSetCmd()) {
      this.cmd = other.cmd;
    }
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetExtPar()) {
      this.extPar = other.extPar;
    }
    if (other.isSetSign()) {
      this.sign = other.sign;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public MmsReportCmdReq deepCopy() {
    return new MmsReportCmdReq(this);
  }

  @Override
  public void clear() {
    this.appKey = null;
    this.serial = null;
    this.cmd = null;
    this.reason = null;
    this.msg = null;
    this.extPar = null;
    this.sign = null;
    this.status = null;
  }

  /**
   * 密钥编码
   */
  public String getAppKey() {
    return this.appKey;
  }

  /**
   * 密钥编码
   */
  public MmsReportCmdReq setAppKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  public void unsetAppKey() {
    this.appKey = null;
  }

  /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppKey() {
    return this.appKey != null;
  }

  public void setAppKeyIsSet(boolean value) {
    if (!value) {
      this.appKey = null;
    }
  }

  /**
   * 流水号
   */
  public String getSerial() {
    return this.serial;
  }

  /**
   * 流水号
   */
  public MmsReportCmdReq setSerial(String serial) {
    this.serial = serial;
    return this;
  }

  public void unsetSerial() {
    this.serial = null;
  }

  /** Returns true if field serial is set (has been assigned a value) and false otherwise */
  public boolean isSetSerial() {
    return this.serial != null;
  }

  public void setSerialIsSet(boolean value) {
    if (!value) {
      this.serial = null;
    }
  }

  /**
   * 指令
   */
  public String getCmd() {
    return this.cmd;
  }

  /**
   * 指令
   */
  public MmsReportCmdReq setCmd(String cmd) {
    this.cmd = cmd;
    return this;
  }

  public void unsetCmd() {
    this.cmd = null;
  }

  /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
  public boolean isSetCmd() {
    return this.cmd != null;
  }

  public void setCmdIsSet(boolean value) {
    if (!value) {
      this.cmd = null;
    }
  }

  /**
   * 处罚理由
   */
  public String getReason() {
    return this.reason;
  }

  /**
   * 处罚理由
   */
  public MmsReportCmdReq setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  /**
   * 反馈信息
   */
  public String getMsg() {
    return this.msg;
  }

  /**
   * 反馈信息
   */
  public MmsReportCmdReq setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  /**
   * 附带参数
   */
  public String getExtPar() {
    return this.extPar;
  }

  /**
   * 附带参数
   */
  public MmsReportCmdReq setExtPar(String extPar) {
    this.extPar = extPar;
    return this;
  }

  public void unsetExtPar() {
    this.extPar = null;
  }

  /** Returns true if field extPar is set (has been assigned a value) and false otherwise */
  public boolean isSetExtPar() {
    return this.extPar != null;
  }

  public void setExtParIsSet(boolean value) {
    if (!value) {
      this.extPar = null;
    }
  }

  /**
   * 签名
   */
  public String getSign() {
    return this.sign;
  }

  /**
   * 签名
   */
  public MmsReportCmdReq setSign(String sign) {
    this.sign = sign;
    return this;
  }

  public void unsetSign() {
    this.sign = null;
  }

  /** Returns true if field sign is set (has been assigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.sign = null;
    }
  }

  /**
   * 审核状态
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 审核状态
   */
  public MmsReportCmdReq setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_KEY:
      if (value == null) {
        unsetAppKey();
      } else {
        setAppKey((String)value);
      }
      break;

    case SERIAL:
      if (value == null) {
        unsetSerial();
      } else {
        setSerial((String)value);
      }
      break;

    case CMD:
      if (value == null) {
        unsetCmd();
      } else {
        setCmd((String)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case EXT_PAR:
      if (value == null) {
        unsetExtPar();
      } else {
        setExtPar((String)value);
      }
      break;

    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_KEY:
      return getAppKey();

    case SERIAL:
      return getSerial();

    case CMD:
      return getCmd();

    case REASON:
      return getReason();

    case MSG:
      return getMsg();

    case EXT_PAR:
      return getExtPar();

    case SIGN:
      return getSign();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_KEY:
      return isSetAppKey();
    case SERIAL:
      return isSetSerial();
    case CMD:
      return isSetCmd();
    case REASON:
      return isSetReason();
    case MSG:
      return isSetMsg();
    case EXT_PAR:
      return isSetExtPar();
    case SIGN:
      return isSetSign();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MmsReportCmdReq)
      return this.equals((MmsReportCmdReq)that);
    return false;
  }

  public boolean equals(MmsReportCmdReq that) {
    if (that == null)
      return false;

    boolean this_present_appKey = true && this.isSetAppKey();
    boolean that_present_appKey = true && that.isSetAppKey();
    if (this_present_appKey || that_present_appKey) {
      if (!(this_present_appKey && that_present_appKey))
        return false;
      if (!this.appKey.equals(that.appKey))
        return false;
    }

    boolean this_present_serial = true && this.isSetSerial();
    boolean that_present_serial = true && that.isSetSerial();
    if (this_present_serial || that_present_serial) {
      if (!(this_present_serial && that_present_serial))
        return false;
      if (!this.serial.equals(that.serial))
        return false;
    }

    boolean this_present_cmd = true && this.isSetCmd();
    boolean that_present_cmd = true && that.isSetCmd();
    if (this_present_cmd || that_present_cmd) {
      if (!(this_present_cmd && that_present_cmd))
        return false;
      if (!this.cmd.equals(that.cmd))
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_extPar = true && this.isSetExtPar();
    boolean that_present_extPar = true && that.isSetExtPar();
    if (this_present_extPar || that_present_extPar) {
      if (!(this_present_extPar && that_present_extPar))
        return false;
      if (!this.extPar.equals(that.extPar))
        return false;
    }

    boolean this_present_sign = true && this.isSetSign();
    boolean that_present_sign = true && that.isSetSign();
    if (this_present_sign || that_present_sign) {
      if (!(this_present_sign && that_present_sign))
        return false;
      if (!this.sign.equals(that.sign))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MmsReportCmdReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(other.isSetAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, other.appKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerial()).compareTo(other.isSetSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serial, other.serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmd()).compareTo(other.isSetCmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, other.cmd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtPar()).compareTo(other.isSetExtPar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtPar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extPar, other.extPar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSign()).compareTo(other.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign, other.sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MmsReportCmdReq(");
    boolean first = true;

    sb.append("appKey:");
    if (this.appKey == null) {
      sb.append("null");
    } else {
      sb.append(this.appKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serial:");
    if (this.serial == null) {
      sb.append("null");
    } else {
      sb.append(this.serial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cmd:");
    if (this.cmd == null) {
      sb.append("null");
    } else {
      sb.append(this.cmd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extPar:");
    if (this.extPar == null) {
      sb.append("null");
    } else {
      sb.append(this.extPar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sign:");
    if (this.sign == null) {
      sb.append("null");
    } else {
      sb.append(this.sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MmsReportCmdReqStandardSchemeFactory implements SchemeFactory {
    public MmsReportCmdReqStandardScheme getScheme() {
      return new MmsReportCmdReqStandardScheme();
    }
  }

  private static class MmsReportCmdReqStandardScheme extends StandardScheme<MmsReportCmdReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MmsReportCmdReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appKey = iprot.readString();
              struct.setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serial = iprot.readString();
              struct.setSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CMD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cmd = iprot.readString();
              struct.setCmdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXT_PAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extPar = iprot.readString();
              struct.setExtParIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sign = iprot.readString();
              struct.setSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MmsReportCmdReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appKey != null) {
        oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
        oprot.writeString(struct.appKey);
        oprot.writeFieldEnd();
      }
      if (struct.serial != null) {
        oprot.writeFieldBegin(SERIAL_FIELD_DESC);
        oprot.writeString(struct.serial);
        oprot.writeFieldEnd();
      }
      if (struct.cmd != null) {
        oprot.writeFieldBegin(CMD_FIELD_DESC);
        oprot.writeString(struct.cmd);
        oprot.writeFieldEnd();
      }
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      if (struct.extPar != null) {
        oprot.writeFieldBegin(EXT_PAR_FIELD_DESC);
        oprot.writeString(struct.extPar);
        oprot.writeFieldEnd();
      }
      if (struct.sign != null) {
        oprot.writeFieldBegin(SIGN_FIELD_DESC);
        oprot.writeString(struct.sign);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MmsReportCmdReqTupleSchemeFactory implements SchemeFactory {
    public MmsReportCmdReqTupleScheme getScheme() {
      return new MmsReportCmdReqTupleScheme();
    }
  }

  private static class MmsReportCmdReqTupleScheme extends TupleScheme<MmsReportCmdReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MmsReportCmdReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppKey()) {
        optionals.set(0);
      }
      if (struct.isSetSerial()) {
        optionals.set(1);
      }
      if (struct.isSetCmd()) {
        optionals.set(2);
      }
      if (struct.isSetReason()) {
        optionals.set(3);
      }
      if (struct.isSetMsg()) {
        optionals.set(4);
      }
      if (struct.isSetExtPar()) {
        optionals.set(5);
      }
      if (struct.isSetSign()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetAppKey()) {
        oprot.writeString(struct.appKey);
      }
      if (struct.isSetSerial()) {
        oprot.writeString(struct.serial);
      }
      if (struct.isSetCmd()) {
        oprot.writeString(struct.cmd);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetExtPar()) {
        oprot.writeString(struct.extPar);
      }
      if (struct.isSetSign()) {
        oprot.writeString(struct.sign);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MmsReportCmdReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.appKey = iprot.readString();
        struct.setAppKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serial = iprot.readString();
        struct.setSerialIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cmd = iprot.readString();
        struct.setCmdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(4)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(5)) {
        struct.extPar = iprot.readString();
        struct.setExtParIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sign = iprot.readString();
        struct.setSignIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
    }
  }

}

