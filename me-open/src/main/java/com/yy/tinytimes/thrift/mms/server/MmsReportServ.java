/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yy.tinytimes.thrift.mms.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MmsReportServ {

  /**
   * 服务接口
   * 
   */
  public interface Iface extends BaseMmsThriftServ.Iface {

    /**
     *  推送监控、举报记录        由接入方实现客户端。对接到监控系统服务器
     * @param MmsReportReq 举报信息列表
     * @return MmsReportRsp
     * 
     * @param mmsReportReq
     */
    public MmsReportRsp pushReports(MmsReportReq mmsReportReq) throws org.apache.thrift.TException;

    /**
     *  推送处罚指令    由接入方实现服务端，供监控系统调用
     * @param MmsReportCmdReq 处罚指令
     * @return MmsReportCmdRsp 处罚指令执行结果
     * 
     * @param mmsReportCmdReq
     */
    public MmsReportCmdRsp pushReportsCmd(MmsReportCmdReq mmsReportCmdReq) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends BaseMmsThriftServ .AsyncIface {

    public void pushReports(MmsReportReq mmsReportReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pushReportsCmd(MmsReportCmdReq mmsReportCmdReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends BaseMmsThriftServ.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public MmsReportRsp pushReports(MmsReportReq mmsReportReq) throws org.apache.thrift.TException
    {
      send_pushReports(mmsReportReq);
      return recv_pushReports();
    }

    public void send_pushReports(MmsReportReq mmsReportReq) throws org.apache.thrift.TException
    {
      pushReports_args args = new pushReports_args();
      args.setMmsReportReq(mmsReportReq);
      sendBase("pushReports", args);
    }

    public MmsReportRsp recv_pushReports() throws org.apache.thrift.TException
    {
      pushReports_result result = new pushReports_result();
      receiveBase(result, "pushReports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushReports failed: unknown result");
    }

    public MmsReportCmdRsp pushReportsCmd(MmsReportCmdReq mmsReportCmdReq) throws org.apache.thrift.TException
    {
      send_pushReportsCmd(mmsReportCmdReq);
      return recv_pushReportsCmd();
    }

    public void send_pushReportsCmd(MmsReportCmdReq mmsReportCmdReq) throws org.apache.thrift.TException
    {
      pushReportsCmd_args args = new pushReportsCmd_args();
      args.setMmsReportCmdReq(mmsReportCmdReq);
      sendBase("pushReportsCmd", args);
    }

    public MmsReportCmdRsp recv_pushReportsCmd() throws org.apache.thrift.TException
    {
      pushReportsCmd_result result = new pushReportsCmd_result();
      receiveBase(result, "pushReportsCmd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushReportsCmd failed: unknown result");
    }

  }
  public static class AsyncClient extends BaseMmsThriftServ.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void pushReports(MmsReportReq mmsReportReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushReports_call method_call = new pushReports_call(mmsReportReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushReports_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MmsReportReq mmsReportReq;
      public pushReports_call(MmsReportReq mmsReportReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mmsReportReq = mmsReportReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushReports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushReports_args args = new pushReports_args();
        args.setMmsReportReq(mmsReportReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MmsReportRsp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pushReports();
      }
    }

    public void pushReportsCmd(MmsReportCmdReq mmsReportCmdReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushReportsCmd_call method_call = new pushReportsCmd_call(mmsReportCmdReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushReportsCmd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MmsReportCmdReq mmsReportCmdReq;
      public pushReportsCmd_call(MmsReportCmdReq mmsReportCmdReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mmsReportCmdReq = mmsReportCmdReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushReportsCmd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushReportsCmd_args args = new pushReportsCmd_args();
        args.setMmsReportCmdReq(mmsReportCmdReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MmsReportCmdRsp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pushReportsCmd();
      }
    }

  }

  public static class Processor<I extends Iface> extends BaseMmsThriftServ.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("pushReports", new pushReports());
      processMap.put("pushReportsCmd", new pushReportsCmd());
      return processMap;
    }

    public static class pushReports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushReports_args> {
      public pushReports() {
        super("pushReports");
      }

      public pushReports_args getEmptyArgsInstance() {
        return new pushReports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushReports_result getResult(I iface, pushReports_args args) throws org.apache.thrift.TException {
        pushReports_result result = new pushReports_result();
        result.success = iface.pushReports(args.mmsReportReq);
        return result;
      }
    }

    public static class pushReportsCmd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushReportsCmd_args> {
      public pushReportsCmd() {
        super("pushReportsCmd");
      }

      public pushReportsCmd_args getEmptyArgsInstance() {
        return new pushReportsCmd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushReportsCmd_result getResult(I iface, pushReportsCmd_args args) throws org.apache.thrift.TException {
        pushReportsCmd_result result = new pushReportsCmd_result();
        result.success = iface.pushReportsCmd(args.mmsReportCmdReq);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends BaseMmsThriftServ.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("pushReports", new pushReports());
      processMap.put("pushReportsCmd", new pushReportsCmd());
      return processMap;
    }

    public static class pushReports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushReports_args, MmsReportRsp> {
      public pushReports() {
        super("pushReports");
      }

      public pushReports_args getEmptyArgsInstance() {
        return new pushReports_args();
      }

      public AsyncMethodCallback<MmsReportRsp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MmsReportRsp>() { 
          public void onComplete(MmsReportRsp o) {
            pushReports_result result = new pushReports_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pushReports_result result = new pushReports_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pushReports_args args, org.apache.thrift.async.AsyncMethodCallback<MmsReportRsp> resultHandler) throws TException {
        iface.pushReports(args.mmsReportReq,resultHandler);
      }
    }

    public static class pushReportsCmd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushReportsCmd_args, MmsReportCmdRsp> {
      public pushReportsCmd() {
        super("pushReportsCmd");
      }

      public pushReportsCmd_args getEmptyArgsInstance() {
        return new pushReportsCmd_args();
      }

      public AsyncMethodCallback<MmsReportCmdRsp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MmsReportCmdRsp>() { 
          public void onComplete(MmsReportCmdRsp o) {
            pushReportsCmd_result result = new pushReportsCmd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pushReportsCmd_result result = new pushReportsCmd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pushReportsCmd_args args, org.apache.thrift.async.AsyncMethodCallback<MmsReportCmdRsp> resultHandler) throws TException {
        iface.pushReportsCmd(args.mmsReportCmdReq,resultHandler);
      }
    }

  }

  public static class pushReports_args implements org.apache.thrift.TBase<pushReports_args, pushReports_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushReports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushReports_args");

    private static final org.apache.thrift.protocol.TField MMS_REPORT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("mmsReportReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushReports_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushReports_argsTupleSchemeFactory());
    }

    public MmsReportReq mmsReportReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MMS_REPORT_REQ((short)1, "mmsReportReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MMS_REPORT_REQ
            return MMS_REPORT_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MMS_REPORT_REQ, new org.apache.thrift.meta_data.FieldMetaData("mmsReportReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MmsReportReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushReports_args.class, metaDataMap);
    }

    public pushReports_args() {
    }

    public pushReports_args(
      MmsReportReq mmsReportReq)
    {
      this();
      this.mmsReportReq = mmsReportReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushReports_args(pushReports_args other) {
      if (other.isSetMmsReportReq()) {
        this.mmsReportReq = new MmsReportReq(other.mmsReportReq);
      }
    }

    public pushReports_args deepCopy() {
      return new pushReports_args(this);
    }

    @Override
    public void clear() {
      this.mmsReportReq = null;
    }

    public MmsReportReq getMmsReportReq() {
      return this.mmsReportReq;
    }

    public pushReports_args setMmsReportReq(MmsReportReq mmsReportReq) {
      this.mmsReportReq = mmsReportReq;
      return this;
    }

    public void unsetMmsReportReq() {
      this.mmsReportReq = null;
    }

    /** Returns true if field mmsReportReq is set (has been assigned a value) and false otherwise */
    public boolean isSetMmsReportReq() {
      return this.mmsReportReq != null;
    }

    public void setMmsReportReqIsSet(boolean value) {
      if (!value) {
        this.mmsReportReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MMS_REPORT_REQ:
        if (value == null) {
          unsetMmsReportReq();
        } else {
          setMmsReportReq((MmsReportReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MMS_REPORT_REQ:
        return getMmsReportReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MMS_REPORT_REQ:
        return isSetMmsReportReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushReports_args)
        return this.equals((pushReports_args)that);
      return false;
    }

    public boolean equals(pushReports_args that) {
      if (that == null)
        return false;

      boolean this_present_mmsReportReq = true && this.isSetMmsReportReq();
      boolean that_present_mmsReportReq = true && that.isSetMmsReportReq();
      if (this_present_mmsReportReq || that_present_mmsReportReq) {
        if (!(this_present_mmsReportReq && that_present_mmsReportReq))
          return false;
        if (!this.mmsReportReq.equals(that.mmsReportReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pushReports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMmsReportReq()).compareTo(other.isSetMmsReportReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmsReportReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmsReportReq, other.mmsReportReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushReports_args(");
      boolean first = true;

      sb.append("mmsReportReq:");
      if (this.mmsReportReq == null) {
        sb.append("null");
      } else {
        sb.append(this.mmsReportReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mmsReportReq != null) {
        mmsReportReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushReports_argsStandardSchemeFactory implements SchemeFactory {
      public pushReports_argsStandardScheme getScheme() {
        return new pushReports_argsStandardScheme();
      }
    }

    private static class pushReports_argsStandardScheme extends StandardScheme<pushReports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushReports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MMS_REPORT_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mmsReportReq = new MmsReportReq();
                struct.mmsReportReq.read(iprot);
                struct.setMmsReportReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushReports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mmsReportReq != null) {
          oprot.writeFieldBegin(MMS_REPORT_REQ_FIELD_DESC);
          struct.mmsReportReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushReports_argsTupleSchemeFactory implements SchemeFactory {
      public pushReports_argsTupleScheme getScheme() {
        return new pushReports_argsTupleScheme();
      }
    }

    private static class pushReports_argsTupleScheme extends TupleScheme<pushReports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushReports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMmsReportReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMmsReportReq()) {
          struct.mmsReportReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushReports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mmsReportReq = new MmsReportReq();
          struct.mmsReportReq.read(iprot);
          struct.setMmsReportReqIsSet(true);
        }
      }
    }

  }

  public static class pushReports_result implements org.apache.thrift.TBase<pushReports_result, pushReports_result._Fields>, java.io.Serializable, Cloneable, Comparable<pushReports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushReports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushReports_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushReports_resultTupleSchemeFactory());
    }

    public MmsReportRsp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MmsReportRsp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushReports_result.class, metaDataMap);
    }

    public pushReports_result() {
    }

    public pushReports_result(
      MmsReportRsp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushReports_result(pushReports_result other) {
      if (other.isSetSuccess()) {
        this.success = new MmsReportRsp(other.success);
      }
    }

    public pushReports_result deepCopy() {
      return new pushReports_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MmsReportRsp getSuccess() {
      return this.success;
    }

    public pushReports_result setSuccess(MmsReportRsp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MmsReportRsp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushReports_result)
        return this.equals((pushReports_result)that);
      return false;
    }

    public boolean equals(pushReports_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pushReports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushReports_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushReports_resultStandardSchemeFactory implements SchemeFactory {
      public pushReports_resultStandardScheme getScheme() {
        return new pushReports_resultStandardScheme();
      }
    }

    private static class pushReports_resultStandardScheme extends StandardScheme<pushReports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushReports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MmsReportRsp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushReports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushReports_resultTupleSchemeFactory implements SchemeFactory {
      public pushReports_resultTupleScheme getScheme() {
        return new pushReports_resultTupleScheme();
      }
    }

    private static class pushReports_resultTupleScheme extends TupleScheme<pushReports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushReports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushReports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MmsReportRsp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pushReportsCmd_args implements org.apache.thrift.TBase<pushReportsCmd_args, pushReportsCmd_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushReportsCmd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushReportsCmd_args");

    private static final org.apache.thrift.protocol.TField MMS_REPORT_CMD_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("mmsReportCmdReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushReportsCmd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushReportsCmd_argsTupleSchemeFactory());
    }

    public MmsReportCmdReq mmsReportCmdReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MMS_REPORT_CMD_REQ((short)1, "mmsReportCmdReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MMS_REPORT_CMD_REQ
            return MMS_REPORT_CMD_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MMS_REPORT_CMD_REQ, new org.apache.thrift.meta_data.FieldMetaData("mmsReportCmdReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MmsReportCmdReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushReportsCmd_args.class, metaDataMap);
    }

    public pushReportsCmd_args() {
    }

    public pushReportsCmd_args(
      MmsReportCmdReq mmsReportCmdReq)
    {
      this();
      this.mmsReportCmdReq = mmsReportCmdReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushReportsCmd_args(pushReportsCmd_args other) {
      if (other.isSetMmsReportCmdReq()) {
        this.mmsReportCmdReq = new MmsReportCmdReq(other.mmsReportCmdReq);
      }
    }

    public pushReportsCmd_args deepCopy() {
      return new pushReportsCmd_args(this);
    }

    @Override
    public void clear() {
      this.mmsReportCmdReq = null;
    }

    public MmsReportCmdReq getMmsReportCmdReq() {
      return this.mmsReportCmdReq;
    }

    public pushReportsCmd_args setMmsReportCmdReq(MmsReportCmdReq mmsReportCmdReq) {
      this.mmsReportCmdReq = mmsReportCmdReq;
      return this;
    }

    public void unsetMmsReportCmdReq() {
      this.mmsReportCmdReq = null;
    }

    /** Returns true if field mmsReportCmdReq is set (has been assigned a value) and false otherwise */
    public boolean isSetMmsReportCmdReq() {
      return this.mmsReportCmdReq != null;
    }

    public void setMmsReportCmdReqIsSet(boolean value) {
      if (!value) {
        this.mmsReportCmdReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MMS_REPORT_CMD_REQ:
        if (value == null) {
          unsetMmsReportCmdReq();
        } else {
          setMmsReportCmdReq((MmsReportCmdReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MMS_REPORT_CMD_REQ:
        return getMmsReportCmdReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MMS_REPORT_CMD_REQ:
        return isSetMmsReportCmdReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushReportsCmd_args)
        return this.equals((pushReportsCmd_args)that);
      return false;
    }

    public boolean equals(pushReportsCmd_args that) {
      if (that == null)
        return false;

      boolean this_present_mmsReportCmdReq = true && this.isSetMmsReportCmdReq();
      boolean that_present_mmsReportCmdReq = true && that.isSetMmsReportCmdReq();
      if (this_present_mmsReportCmdReq || that_present_mmsReportCmdReq) {
        if (!(this_present_mmsReportCmdReq && that_present_mmsReportCmdReq))
          return false;
        if (!this.mmsReportCmdReq.equals(that.mmsReportCmdReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pushReportsCmd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMmsReportCmdReq()).compareTo(other.isSetMmsReportCmdReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMmsReportCmdReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmsReportCmdReq, other.mmsReportCmdReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushReportsCmd_args(");
      boolean first = true;

      sb.append("mmsReportCmdReq:");
      if (this.mmsReportCmdReq == null) {
        sb.append("null");
      } else {
        sb.append(this.mmsReportCmdReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (mmsReportCmdReq != null) {
        mmsReportCmdReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushReportsCmd_argsStandardSchemeFactory implements SchemeFactory {
      public pushReportsCmd_argsStandardScheme getScheme() {
        return new pushReportsCmd_argsStandardScheme();
      }
    }

    private static class pushReportsCmd_argsStandardScheme extends StandardScheme<pushReportsCmd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushReportsCmd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MMS_REPORT_CMD_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mmsReportCmdReq = new MmsReportCmdReq();
                struct.mmsReportCmdReq.read(iprot);
                struct.setMmsReportCmdReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushReportsCmd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mmsReportCmdReq != null) {
          oprot.writeFieldBegin(MMS_REPORT_CMD_REQ_FIELD_DESC);
          struct.mmsReportCmdReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushReportsCmd_argsTupleSchemeFactory implements SchemeFactory {
      public pushReportsCmd_argsTupleScheme getScheme() {
        return new pushReportsCmd_argsTupleScheme();
      }
    }

    private static class pushReportsCmd_argsTupleScheme extends TupleScheme<pushReportsCmd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushReportsCmd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMmsReportCmdReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMmsReportCmdReq()) {
          struct.mmsReportCmdReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushReportsCmd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mmsReportCmdReq = new MmsReportCmdReq();
          struct.mmsReportCmdReq.read(iprot);
          struct.setMmsReportCmdReqIsSet(true);
        }
      }
    }

  }

  public static class pushReportsCmd_result implements org.apache.thrift.TBase<pushReportsCmd_result, pushReportsCmd_result._Fields>, java.io.Serializable, Cloneable, Comparable<pushReportsCmd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushReportsCmd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushReportsCmd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushReportsCmd_resultTupleSchemeFactory());
    }

    public MmsReportCmdRsp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MmsReportCmdRsp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushReportsCmd_result.class, metaDataMap);
    }

    public pushReportsCmd_result() {
    }

    public pushReportsCmd_result(
      MmsReportCmdRsp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushReportsCmd_result(pushReportsCmd_result other) {
      if (other.isSetSuccess()) {
        this.success = new MmsReportCmdRsp(other.success);
      }
    }

    public pushReportsCmd_result deepCopy() {
      return new pushReportsCmd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MmsReportCmdRsp getSuccess() {
      return this.success;
    }

    public pushReportsCmd_result setSuccess(MmsReportCmdRsp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MmsReportCmdRsp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushReportsCmd_result)
        return this.equals((pushReportsCmd_result)that);
      return false;
    }

    public boolean equals(pushReportsCmd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pushReportsCmd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushReportsCmd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushReportsCmd_resultStandardSchemeFactory implements SchemeFactory {
      public pushReportsCmd_resultStandardScheme getScheme() {
        return new pushReportsCmd_resultStandardScheme();
      }
    }

    private static class pushReportsCmd_resultStandardScheme extends StandardScheme<pushReportsCmd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushReportsCmd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MmsReportCmdRsp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushReportsCmd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushReportsCmd_resultTupleSchemeFactory implements SchemeFactory {
      public pushReportsCmd_resultTupleScheme getScheme() {
        return new pushReportsCmd_resultTupleScheme();
      }
    }

    private static class pushReportsCmd_resultTupleScheme extends TupleScheme<pushReportsCmd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushReportsCmd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushReportsCmd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MmsReportCmdRsp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
