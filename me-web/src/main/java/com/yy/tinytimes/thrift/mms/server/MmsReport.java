/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yy.tinytimes.thrift.mms.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 监控/举报信息
 */
public class MmsReport implements org.apache.thrift.TBase<MmsReport, MmsReport._Fields>, java.io.Serializable, Cloneable, Comparable<MmsReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MmsReport");

  private static final org.apache.thrift.protocol.TField SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("serial", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REPORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reportTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REPORT_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("reportComment", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("attachments", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField UPLOAD_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadUid", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SEVERITY_FIELD_DESC = new org.apache.thrift.protocol.TField("severity", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SSID_FIELD_DESC = new org.apache.thrift.protocol.TField("ssid", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField OWID_FIELD_DESC = new org.apache.thrift.protocol.TField("owid", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PCU_FIELD_DESC = new org.apache.thrift.protocol.TField("pcu", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField EXT_PAR_FIELD_DESC = new org.apache.thrift.protocol.TField("extPar", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MmsReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MmsReportTupleSchemeFactory());
  }

  /**
   * 流水号（视频流系列编号 programid）
   */
  public String serial; // required
  /**
   * 待审用户uid
   */
  public long uid; // required
  /**
   * 上报时间
   */
  public String reportTime; // required
  /**
   * 上报主体 （备注）， 由接入双方按照约定 json 结构上传，接入服务按照给定格式检查
   */
  public String reportComment; // required
  /**
   * 上报附件
   */
  public List<MmsReportAttc> attachments; // required
  /**
   * 上传人uid（非必填）
   */
  public long uploadUid; // required
  /**
   * 举报级别（非必填）
   */
  public String severity; // required
  /**
   * 频道ID（非必填）
   */
  public long sid; // required
  /**
   * 子频道ID（非必填）
   */
  public long ssid; // required
  /**
   * OWID（非必填）
   */
  public long owid; // required
  /**
   * 人气（非必填）
   */
  public long pcu; // required
  /**
   * 附带参数（非必填）
   */
  public String extPar; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 流水号（视频流系列编号 programid）
     */
    SERIAL((short)1, "serial"),
    /**
     * 待审用户uid
     */
    UID((short)2, "uid"),
    /**
     * 上报时间
     */
    REPORT_TIME((short)3, "reportTime"),
    /**
     * 上报主体 （备注）， 由接入双方按照约定 json 结构上传，接入服务按照给定格式检查
     */
    REPORT_COMMENT((short)4, "reportComment"),
    /**
     * 上报附件
     */
    ATTACHMENTS((short)5, "attachments"),
    /**
     * 上传人uid（非必填）
     */
    UPLOAD_UID((short)6, "uploadUid"),
    /**
     * 举报级别（非必填）
     */
    SEVERITY((short)7, "severity"),
    /**
     * 频道ID（非必填）
     */
    SID((short)8, "sid"),
    /**
     * 子频道ID（非必填）
     */
    SSID((short)9, "ssid"),
    /**
     * OWID（非必填）
     */
    OWID((short)10, "owid"),
    /**
     * 人气（非必填）
     */
    PCU((short)11, "pcu"),
    /**
     * 附带参数（非必填）
     */
    EXT_PAR((short)12, "extPar");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERIAL
          return SERIAL;
        case 2: // UID
          return UID;
        case 3: // REPORT_TIME
          return REPORT_TIME;
        case 4: // REPORT_COMMENT
          return REPORT_COMMENT;
        case 5: // ATTACHMENTS
          return ATTACHMENTS;
        case 6: // UPLOAD_UID
          return UPLOAD_UID;
        case 7: // SEVERITY
          return SEVERITY;
        case 8: // SID
          return SID;
        case 9: // SSID
          return SSID;
        case 10: // OWID
          return OWID;
        case 11: // PCU
          return PCU;
        case 12: // EXT_PAR
          return EXT_PAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __UPLOADUID_ISSET_ID = 1;
  private static final int __SID_ISSET_ID = 2;
  private static final int __SSID_ISSET_ID = 3;
  private static final int __OWID_ISSET_ID = 4;
  private static final int __PCU_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERIAL, new org.apache.thrift.meta_data.FieldMetaData("serial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("reportTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("reportComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("attachments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MmsReportAttc.class))));
    tmpMap.put(_Fields.UPLOAD_UID, new org.apache.thrift.meta_data.FieldMetaData("uploadUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEVERITY, new org.apache.thrift.meta_data.FieldMetaData("severity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SSID, new org.apache.thrift.meta_data.FieldMetaData("ssid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OWID, new org.apache.thrift.meta_data.FieldMetaData("owid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PCU, new org.apache.thrift.meta_data.FieldMetaData("pcu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXT_PAR, new org.apache.thrift.meta_data.FieldMetaData("extPar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MmsReport.class, metaDataMap);
  }

  public MmsReport() {
  }

  public MmsReport(
    String serial,
    long uid,
    String reportTime,
    String reportComment,
    List<MmsReportAttc> attachments,
    long uploadUid,
    String severity,
    long sid,
    long ssid,
    long owid,
    long pcu,
    String extPar)
  {
    this();
    this.serial = serial;
    this.uid = uid;
    setUidIsSet(true);
    this.reportTime = reportTime;
    this.reportComment = reportComment;
    this.attachments = attachments;
    this.uploadUid = uploadUid;
    setUploadUidIsSet(true);
    this.severity = severity;
    this.sid = sid;
    setSidIsSet(true);
    this.ssid = ssid;
    setSsidIsSet(true);
    this.owid = owid;
    setOwidIsSet(true);
    this.pcu = pcu;
    setPcuIsSet(true);
    this.extPar = extPar;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MmsReport(MmsReport other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSerial()) {
      this.serial = other.serial;
    }
    this.uid = other.uid;
    if (other.isSetReportTime()) {
      this.reportTime = other.reportTime;
    }
    if (other.isSetReportComment()) {
      this.reportComment = other.reportComment;
    }
    if (other.isSetAttachments()) {
      List<MmsReportAttc> __this__attachments = new ArrayList<MmsReportAttc>(other.attachments.size());
      for (MmsReportAttc other_element : other.attachments) {
        __this__attachments.add(new MmsReportAttc(other_element));
      }
      this.attachments = __this__attachments;
    }
    this.uploadUid = other.uploadUid;
    if (other.isSetSeverity()) {
      this.severity = other.severity;
    }
    this.sid = other.sid;
    this.ssid = other.ssid;
    this.owid = other.owid;
    this.pcu = other.pcu;
    if (other.isSetExtPar()) {
      this.extPar = other.extPar;
    }
  }

  public MmsReport deepCopy() {
    return new MmsReport(this);
  }

  @Override
  public void clear() {
    this.serial = null;
    setUidIsSet(false);
    this.uid = 0;
    this.reportTime = null;
    this.reportComment = null;
    this.attachments = null;
    setUploadUidIsSet(false);
    this.uploadUid = 0;
    this.severity = null;
    setSidIsSet(false);
    this.sid = 0;
    setSsidIsSet(false);
    this.ssid = 0;
    setOwidIsSet(false);
    this.owid = 0;
    setPcuIsSet(false);
    this.pcu = 0;
    this.extPar = null;
  }

  /**
   * 流水号（视频流系列编号 programid）
   */
  public String getSerial() {
    return this.serial;
  }

  /**
   * 流水号（视频流系列编号 programid）
   */
  public MmsReport setSerial(String serial) {
    this.serial = serial;
    return this;
  }

  public void unsetSerial() {
    this.serial = null;
  }

  /** Returns true if field serial is set (has been assigned a value) and false otherwise */
  public boolean isSetSerial() {
    return this.serial != null;
  }

  public void setSerialIsSet(boolean value) {
    if (!value) {
      this.serial = null;
    }
  }

  /**
   * 待审用户uid
   */
  public long getUid() {
    return this.uid;
  }

  /**
   * 待审用户uid
   */
  public MmsReport setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  /**
   * 上报时间
   */
  public String getReportTime() {
    return this.reportTime;
  }

  /**
   * 上报时间
   */
  public MmsReport setReportTime(String reportTime) {
    this.reportTime = reportTime;
    return this;
  }

  public void unsetReportTime() {
    this.reportTime = null;
  }

  /** Returns true if field reportTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReportTime() {
    return this.reportTime != null;
  }

  public void setReportTimeIsSet(boolean value) {
    if (!value) {
      this.reportTime = null;
    }
  }

  /**
   * 上报主体 （备注）， 由接入双方按照约定 json 结构上传，接入服务按照给定格式检查
   */
  public String getReportComment() {
    return this.reportComment;
  }

  /**
   * 上报主体 （备注）， 由接入双方按照约定 json 结构上传，接入服务按照给定格式检查
   */
  public MmsReport setReportComment(String reportComment) {
    this.reportComment = reportComment;
    return this;
  }

  public void unsetReportComment() {
    this.reportComment = null;
  }

  /** Returns true if field reportComment is set (has been assigned a value) and false otherwise */
  public boolean isSetReportComment() {
    return this.reportComment != null;
  }

  public void setReportCommentIsSet(boolean value) {
    if (!value) {
      this.reportComment = null;
    }
  }

  public int getAttachmentsSize() {
    return (this.attachments == null) ? 0 : this.attachments.size();
  }

  public java.util.Iterator<MmsReportAttc> getAttachmentsIterator() {
    return (this.attachments == null) ? null : this.attachments.iterator();
  }

  public void addToAttachments(MmsReportAttc elem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<MmsReportAttc>();
    }
    this.attachments.add(elem);
  }

  /**
   * 上报附件
   */
  public List<MmsReportAttc> getAttachments() {
    return this.attachments;
  }

  /**
   * 上报附件
   */
  public MmsReport setAttachments(List<MmsReportAttc> attachments) {
    this.attachments = attachments;
    return this;
  }

  public void unsetAttachments() {
    this.attachments = null;
  }

  /** Returns true if field attachments is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachments() {
    return this.attachments != null;
  }

  public void setAttachmentsIsSet(boolean value) {
    if (!value) {
      this.attachments = null;
    }
  }

  /**
   * 上传人uid（非必填）
   */
  public long getUploadUid() {
    return this.uploadUid;
  }

  /**
   * 上传人uid（非必填）
   */
  public MmsReport setUploadUid(long uploadUid) {
    this.uploadUid = uploadUid;
    setUploadUidIsSet(true);
    return this;
  }

  public void unsetUploadUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADUID_ISSET_ID);
  }

  /** Returns true if field uploadUid is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADUID_ISSET_ID);
  }

  public void setUploadUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADUID_ISSET_ID, value);
  }

  /**
   * 举报级别（非必填）
   */
  public String getSeverity() {
    return this.severity;
  }

  /**
   * 举报级别（非必填）
   */
  public MmsReport setSeverity(String severity) {
    this.severity = severity;
    return this;
  }

  public void unsetSeverity() {
    this.severity = null;
  }

  /** Returns true if field severity is set (has been assigned a value) and false otherwise */
  public boolean isSetSeverity() {
    return this.severity != null;
  }

  public void setSeverityIsSet(boolean value) {
    if (!value) {
      this.severity = null;
    }
  }

  /**
   * 频道ID（非必填）
   */
  public long getSid() {
    return this.sid;
  }

  /**
   * 频道ID（非必填）
   */
  public MmsReport setSid(long sid) {
    this.sid = sid;
    setSidIsSet(true);
    return this;
  }

  public void unsetSid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SID_ISSET_ID);
  }

  /** Returns true if field sid is set (has been assigned a value) and false otherwise */
  public boolean isSetSid() {
    return EncodingUtils.testBit(__isset_bitfield, __SID_ISSET_ID);
  }

  public void setSidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SID_ISSET_ID, value);
  }

  /**
   * 子频道ID（非必填）
   */
  public long getSsid() {
    return this.ssid;
  }

  /**
   * 子频道ID（非必填）
   */
  public MmsReport setSsid(long ssid) {
    this.ssid = ssid;
    setSsidIsSet(true);
    return this;
  }

  public void unsetSsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SSID_ISSET_ID);
  }

  /** Returns true if field ssid is set (has been assigned a value) and false otherwise */
  public boolean isSetSsid() {
    return EncodingUtils.testBit(__isset_bitfield, __SSID_ISSET_ID);
  }

  public void setSsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SSID_ISSET_ID, value);
  }

  /**
   * OWID（非必填）
   */
  public long getOwid() {
    return this.owid;
  }

  /**
   * OWID（非必填）
   */
  public MmsReport setOwid(long owid) {
    this.owid = owid;
    setOwidIsSet(true);
    return this;
  }

  public void unsetOwid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWID_ISSET_ID);
  }

  /** Returns true if field owid is set (has been assigned a value) and false otherwise */
  public boolean isSetOwid() {
    return EncodingUtils.testBit(__isset_bitfield, __OWID_ISSET_ID);
  }

  public void setOwidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWID_ISSET_ID, value);
  }

  /**
   * 人气（非必填）
   */
  public long getPcu() {
    return this.pcu;
  }

  /**
   * 人气（非必填）
   */
  public MmsReport setPcu(long pcu) {
    this.pcu = pcu;
    setPcuIsSet(true);
    return this;
  }

  public void unsetPcu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PCU_ISSET_ID);
  }

  /** Returns true if field pcu is set (has been assigned a value) and false otherwise */
  public boolean isSetPcu() {
    return EncodingUtils.testBit(__isset_bitfield, __PCU_ISSET_ID);
  }

  public void setPcuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PCU_ISSET_ID, value);
  }

  /**
   * 附带参数（非必填）
   */
  public String getExtPar() {
    return this.extPar;
  }

  /**
   * 附带参数（非必填）
   */
  public MmsReport setExtPar(String extPar) {
    this.extPar = extPar;
    return this;
  }

  public void unsetExtPar() {
    this.extPar = null;
  }

  /** Returns true if field extPar is set (has been assigned a value) and false otherwise */
  public boolean isSetExtPar() {
    return this.extPar != null;
  }

  public void setExtParIsSet(boolean value) {
    if (!value) {
      this.extPar = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERIAL:
      if (value == null) {
        unsetSerial();
      } else {
        setSerial((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case REPORT_TIME:
      if (value == null) {
        unsetReportTime();
      } else {
        setReportTime((String)value);
      }
      break;

    case REPORT_COMMENT:
      if (value == null) {
        unsetReportComment();
      } else {
        setReportComment((String)value);
      }
      break;

    case ATTACHMENTS:
      if (value == null) {
        unsetAttachments();
      } else {
        setAttachments((List<MmsReportAttc>)value);
      }
      break;

    case UPLOAD_UID:
      if (value == null) {
        unsetUploadUid();
      } else {
        setUploadUid((Long)value);
      }
      break;

    case SEVERITY:
      if (value == null) {
        unsetSeverity();
      } else {
        setSeverity((String)value);
      }
      break;

    case SID:
      if (value == null) {
        unsetSid();
      } else {
        setSid((Long)value);
      }
      break;

    case SSID:
      if (value == null) {
        unsetSsid();
      } else {
        setSsid((Long)value);
      }
      break;

    case OWID:
      if (value == null) {
        unsetOwid();
      } else {
        setOwid((Long)value);
      }
      break;

    case PCU:
      if (value == null) {
        unsetPcu();
      } else {
        setPcu((Long)value);
      }
      break;

    case EXT_PAR:
      if (value == null) {
        unsetExtPar();
      } else {
        setExtPar((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERIAL:
      return getSerial();

    case UID:
      return Long.valueOf(getUid());

    case REPORT_TIME:
      return getReportTime();

    case REPORT_COMMENT:
      return getReportComment();

    case ATTACHMENTS:
      return getAttachments();

    case UPLOAD_UID:
      return Long.valueOf(getUploadUid());

    case SEVERITY:
      return getSeverity();

    case SID:
      return Long.valueOf(getSid());

    case SSID:
      return Long.valueOf(getSsid());

    case OWID:
      return Long.valueOf(getOwid());

    case PCU:
      return Long.valueOf(getPcu());

    case EXT_PAR:
      return getExtPar();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERIAL:
      return isSetSerial();
    case UID:
      return isSetUid();
    case REPORT_TIME:
      return isSetReportTime();
    case REPORT_COMMENT:
      return isSetReportComment();
    case ATTACHMENTS:
      return isSetAttachments();
    case UPLOAD_UID:
      return isSetUploadUid();
    case SEVERITY:
      return isSetSeverity();
    case SID:
      return isSetSid();
    case SSID:
      return isSetSsid();
    case OWID:
      return isSetOwid();
    case PCU:
      return isSetPcu();
    case EXT_PAR:
      return isSetExtPar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MmsReport)
      return this.equals((MmsReport)that);
    return false;
  }

  public boolean equals(MmsReport that) {
    if (that == null)
      return false;

    boolean this_present_serial = true && this.isSetSerial();
    boolean that_present_serial = true && that.isSetSerial();
    if (this_present_serial || that_present_serial) {
      if (!(this_present_serial && that_present_serial))
        return false;
      if (!this.serial.equals(that.serial))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_reportTime = true && this.isSetReportTime();
    boolean that_present_reportTime = true && that.isSetReportTime();
    if (this_present_reportTime || that_present_reportTime) {
      if (!(this_present_reportTime && that_present_reportTime))
        return false;
      if (!this.reportTime.equals(that.reportTime))
        return false;
    }

    boolean this_present_reportComment = true && this.isSetReportComment();
    boolean that_present_reportComment = true && that.isSetReportComment();
    if (this_present_reportComment || that_present_reportComment) {
      if (!(this_present_reportComment && that_present_reportComment))
        return false;
      if (!this.reportComment.equals(that.reportComment))
        return false;
    }

    boolean this_present_attachments = true && this.isSetAttachments();
    boolean that_present_attachments = true && that.isSetAttachments();
    if (this_present_attachments || that_present_attachments) {
      if (!(this_present_attachments && that_present_attachments))
        return false;
      if (!this.attachments.equals(that.attachments))
        return false;
    }

    boolean this_present_uploadUid = true;
    boolean that_present_uploadUid = true;
    if (this_present_uploadUid || that_present_uploadUid) {
      if (!(this_present_uploadUid && that_present_uploadUid))
        return false;
      if (this.uploadUid != that.uploadUid)
        return false;
    }

    boolean this_present_severity = true && this.isSetSeverity();
    boolean that_present_severity = true && that.isSetSeverity();
    if (this_present_severity || that_present_severity) {
      if (!(this_present_severity && that_present_severity))
        return false;
      if (!this.severity.equals(that.severity))
        return false;
    }

    boolean this_present_sid = true;
    boolean that_present_sid = true;
    if (this_present_sid || that_present_sid) {
      if (!(this_present_sid && that_present_sid))
        return false;
      if (this.sid != that.sid)
        return false;
    }

    boolean this_present_ssid = true;
    boolean that_present_ssid = true;
    if (this_present_ssid || that_present_ssid) {
      if (!(this_present_ssid && that_present_ssid))
        return false;
      if (this.ssid != that.ssid)
        return false;
    }

    boolean this_present_owid = true;
    boolean that_present_owid = true;
    if (this_present_owid || that_present_owid) {
      if (!(this_present_owid && that_present_owid))
        return false;
      if (this.owid != that.owid)
        return false;
    }

    boolean this_present_pcu = true;
    boolean that_present_pcu = true;
    if (this_present_pcu || that_present_pcu) {
      if (!(this_present_pcu && that_present_pcu))
        return false;
      if (this.pcu != that.pcu)
        return false;
    }

    boolean this_present_extPar = true && this.isSetExtPar();
    boolean that_present_extPar = true && that.isSetExtPar();
    if (this_present_extPar || that_present_extPar) {
      if (!(this_present_extPar && that_present_extPar))
        return false;
      if (!this.extPar.equals(that.extPar))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MmsReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSerial()).compareTo(other.isSetSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serial, other.serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportTime()).compareTo(other.isSetReportTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportTime, other.reportTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportComment()).compareTo(other.isSetReportComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportComment, other.reportComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachments()).compareTo(other.isSetAttachments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachments, other.attachments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadUid()).compareTo(other.isSetUploadUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadUid, other.uploadUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeverity()).compareTo(other.isSetSeverity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeverity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.severity, other.severity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSsid()).compareTo(other.isSetSsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ssid, other.ssid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwid()).compareTo(other.isSetOwid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owid, other.owid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPcu()).compareTo(other.isSetPcu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcu, other.pcu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtPar()).compareTo(other.isSetExtPar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtPar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extPar, other.extPar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MmsReport(");
    boolean first = true;

    sb.append("serial:");
    if (this.serial == null) {
      sb.append("null");
    } else {
      sb.append(this.serial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportTime:");
    if (this.reportTime == null) {
      sb.append("null");
    } else {
      sb.append(this.reportTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportComment:");
    if (this.reportComment == null) {
      sb.append("null");
    } else {
      sb.append(this.reportComment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachments:");
    if (this.attachments == null) {
      sb.append("null");
    } else {
      sb.append(this.attachments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadUid:");
    sb.append(this.uploadUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("severity:");
    if (this.severity == null) {
      sb.append("null");
    } else {
      sb.append(this.severity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sid:");
    sb.append(this.sid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ssid:");
    sb.append(this.ssid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owid:");
    sb.append(this.owid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pcu:");
    sb.append(this.pcu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extPar:");
    if (this.extPar == null) {
      sb.append("null");
    } else {
      sb.append(this.extPar);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MmsReportStandardSchemeFactory implements SchemeFactory {
    public MmsReportStandardScheme getScheme() {
      return new MmsReportStandardScheme();
    }
  }

  private static class MmsReportStandardScheme extends StandardScheme<MmsReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MmsReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serial = iprot.readString();
              struct.setSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportTime = iprot.readString();
              struct.setReportTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPORT_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportComment = iprot.readString();
              struct.setReportCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ATTACHMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.attachments = new ArrayList<MmsReportAttc>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  MmsReportAttc _elem10;
                  _elem10 = new MmsReportAttc();
                  _elem10.read(iprot);
                  struct.attachments.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setAttachmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPLOAD_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uploadUid = iprot.readI64();
              struct.setUploadUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEVERITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.severity = iprot.readString();
              struct.setSeverityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sid = iprot.readI64();
              struct.setSidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ssid = iprot.readI64();
              struct.setSsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OWID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.owid = iprot.readI64();
              struct.setOwidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PCU
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pcu = iprot.readI64();
              struct.setPcuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXT_PAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extPar = iprot.readString();
              struct.setExtParIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MmsReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serial != null) {
        oprot.writeFieldBegin(SERIAL_FIELD_DESC);
        oprot.writeString(struct.serial);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      if (struct.reportTime != null) {
        oprot.writeFieldBegin(REPORT_TIME_FIELD_DESC);
        oprot.writeString(struct.reportTime);
        oprot.writeFieldEnd();
      }
      if (struct.reportComment != null) {
        oprot.writeFieldBegin(REPORT_COMMENT_FIELD_DESC);
        oprot.writeString(struct.reportComment);
        oprot.writeFieldEnd();
      }
      if (struct.attachments != null) {
        oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attachments.size()));
          for (MmsReportAttc _iter11 : struct.attachments)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPLOAD_UID_FIELD_DESC);
      oprot.writeI64(struct.uploadUid);
      oprot.writeFieldEnd();
      if (struct.severity != null) {
        oprot.writeFieldBegin(SEVERITY_FIELD_DESC);
        oprot.writeString(struct.severity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SID_FIELD_DESC);
      oprot.writeI64(struct.sid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SSID_FIELD_DESC);
      oprot.writeI64(struct.ssid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OWID_FIELD_DESC);
      oprot.writeI64(struct.owid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PCU_FIELD_DESC);
      oprot.writeI64(struct.pcu);
      oprot.writeFieldEnd();
      if (struct.extPar != null) {
        oprot.writeFieldBegin(EXT_PAR_FIELD_DESC);
        oprot.writeString(struct.extPar);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MmsReportTupleSchemeFactory implements SchemeFactory {
    public MmsReportTupleScheme getScheme() {
      return new MmsReportTupleScheme();
    }
  }

  private static class MmsReportTupleScheme extends TupleScheme<MmsReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MmsReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSerial()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetReportTime()) {
        optionals.set(2);
      }
      if (struct.isSetReportComment()) {
        optionals.set(3);
      }
      if (struct.isSetAttachments()) {
        optionals.set(4);
      }
      if (struct.isSetUploadUid()) {
        optionals.set(5);
      }
      if (struct.isSetSeverity()) {
        optionals.set(6);
      }
      if (struct.isSetSid()) {
        optionals.set(7);
      }
      if (struct.isSetSsid()) {
        optionals.set(8);
      }
      if (struct.isSetOwid()) {
        optionals.set(9);
      }
      if (struct.isSetPcu()) {
        optionals.set(10);
      }
      if (struct.isSetExtPar()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetSerial()) {
        oprot.writeString(struct.serial);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetReportTime()) {
        oprot.writeString(struct.reportTime);
      }
      if (struct.isSetReportComment()) {
        oprot.writeString(struct.reportComment);
      }
      if (struct.isSetAttachments()) {
        {
          oprot.writeI32(struct.attachments.size());
          for (MmsReportAttc _iter12 : struct.attachments)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetUploadUid()) {
        oprot.writeI64(struct.uploadUid);
      }
      if (struct.isSetSeverity()) {
        oprot.writeString(struct.severity);
      }
      if (struct.isSetSid()) {
        oprot.writeI64(struct.sid);
      }
      if (struct.isSetSsid()) {
        oprot.writeI64(struct.ssid);
      }
      if (struct.isSetOwid()) {
        oprot.writeI64(struct.owid);
      }
      if (struct.isSetPcu()) {
        oprot.writeI64(struct.pcu);
      }
      if (struct.isSetExtPar()) {
        oprot.writeString(struct.extPar);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MmsReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.serial = iprot.readString();
        struct.setSerialIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reportTime = iprot.readString();
        struct.setReportTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reportComment = iprot.readString();
        struct.setReportCommentIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.attachments = new ArrayList<MmsReportAttc>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            MmsReportAttc _elem15;
            _elem15 = new MmsReportAttc();
            _elem15.read(iprot);
            struct.attachments.add(_elem15);
          }
        }
        struct.setAttachmentsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.uploadUid = iprot.readI64();
        struct.setUploadUidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.severity = iprot.readString();
        struct.setSeverityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sid = iprot.readI64();
        struct.setSidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ssid = iprot.readI64();
        struct.setSsidIsSet(true);
      }
      if (incoming.get(9)) {
        struct.owid = iprot.readI64();
        struct.setOwidIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pcu = iprot.readI64();
        struct.setPcuIsSet(true);
      }
      if (incoming.get(11)) {
        struct.extPar = iprot.readString();
        struct.setExtParIsSet(true);
      }
    }
  }

}

